### Задание 1: Установка и настройка Flask

1. Установите Flask, используя pip, и создайте простой проект.
   - Напишите приложение, которое будет отображать текст "Hello, World!" на главной странице (/).
   - Запустите приложение и убедитесь, что оно доступно по адресу http://127.0.0.1:5000/.

### Задание 2: Создание простого веб-приложения

2. Создайте простое веб-приложение на Flask, которое:
   - Имеет две страницы: главная (/) и страница о себе (/about).
   - На главной странице отображается приветственное сообщение,
    а на странице "О себе" — информация о вас (например, имя, хобби, работа).

### Задание 3: Работа с маршрутами и параметрами

3. Напишите приложение, которое:
   - Имеет маршрут /greet/<name>, где <name> — это переменная, передаваемая в URL.
   - Отображает персонализированное приветствие "Hello, <name>!"
    на странице в зависимости от переданного имени.

### Задание 4: Формы и обработка данных

4. Создайте веб-приложение, которое:
   - Имеет форму на главной странице, где пользователь может ввести свое имя.
   - После отправки формы приложение должно отображать приветственное сообщение
    с введенным именем на новой странице.

### Задание 5: Работа с шаблонами Jinja2

5. Напишите приложение, которое:
   - Использует шаблоны Jinja2 для рендеринга страниц.
   - Создайте шаблон index.html для главной страницы и about.html для страницы "О себе".
   - Используйте условный рендеринг для отображения различных областей на страницах
    в зависимости от данных.

### Задание 6: Использование шаблонов с переменными

6. Создайте приложение, которое:
   - Загружает список объектов (например, книг) и передает его в шаблон Jinja2 для отображения.
   - На странице отображается список книг с их названиями и авторами.

### Задание 7: Наследование шаблонов

7. Напишите приложение, которое:
   - Создает базовый шаблон base.html, который содержит общую структуру
    страницы (например, заголовок и подвал).
   - Создает шаблоны index.html и about.html, которые наследуют от base.html.
   - Убедитесь, что изменения в базовом шаблоне автоматически применяются
   ко всем наследуемым шаблонам.

### Задание 8: Статические файлы

8. Создайте приложение, которое:
   - Загружает и отображает статические файлы (например, изображения, CSS и JavaScript)
    из директории static.
   - Добавьте стиль к вашей главной странице с помощью CSS, находящегося в static/styles.css.

### Задание 9: Динамическое обновление контента

9. Напишите приложение, которое:
   - Использует форму для создания динамического списка задач (To-Do list).
   - Пользователь может добавлять задачи, и они будут отображаться на странице
    в реальном времени.


### Задание 10: Обработка ошибок

10. Создайте приложение, которое:
    - Обрабатывает ошибки 404 (страница не найдена) и 500 (внутренняя ошибка сервера)
     с пользовательскими страницами ошибок.
    - Создайте соответствующие шаблоны для отображения, например, 404.html и 500.html.