### Задание 1: Настройка Flask для создания API

1. Установите Flask и создайте новый проект.
2. Настройте базовую структуру приложения Flask и создайте файл app.py, в котором будет находиться ваше API.
3. Создайте конечную точку, которая будет возвращать сообщение "Hello, World!" в формате JSON по маршруту /.

### Задание 2: Создание простого API для управления задачами

2. Реализуйте простое API, которое будет управлять задачами:
   - Создайте маршруты:
     - GET /tasks — вернуть список задач.
     - POST /tasks — добавить новую задачу.
     - GET /tasks/<task_id> — вернуть задачу по ее id.
     - PUT /tasks/<task_id> — обновить задачу.
     - DELETE /tasks/<task_id> — удалить задачу.

### Задание 3: Хранение данных с помощью SQLite

3. Модифицируйте созданное вами API для управления задачами так, чтобы данные о задачах хранились в базе данных SQLite:
   - Создайте таблицу для задач с полями, такими как id, title, description и completed.
   - Используйте SQLAlchemy для работы с вашей базой данных.

### Задание 4: Аутентификация пользователя

4. Добавьте простую аутентификацию для вашего API:
   - Реализуйте регистрацию пользователей с обычным именем пользователя и паролем.
   - Позвольте пользователям входить в систему и получать токены аутентификации (вы можете использовать библиотеку Flask-JWT-Extended).

### Задание 5: Защищенные маршруты

5. Создайте защищенные маршруты, доступные только для аутентифицированных пользователей:
   - Ограничьте доступ к маршрутам для управления задачами так, чтобы их могли использовать только авторизованные пользователи.
   - Проверьте, работает ли защита, пытаясь получить доступ к защищенным маршрутам без токена.

### Задание 6: Пагинация и фильтрация

6. Реализуйте пагинацию и фильтрацию в вашем API:
   - Добавьте возможность фильтровать задачи по статусу (завершены/незавершены).
   - Добавьте параметры пагинации, чтобы возвращать ограниченное количество задач на странице.