### Задание 1: Асинхронная функция

Напишите асинхронную функцию async def print_numbers(), которая выводит числа от 1 до 5 с задержкой в 1 секунду между выводами. Используйте await asyncio.sleep(1) для создания задержки.

#### Подсказки:
- Используйте asyncio.run() для запуска вашей асинхронной функции.

### Задание 2: Асинхронный ввод-вывод

Напишите асинхронную функцию async def read_file(filename), которая читает содержимое текстового файла и возвращает его. Используйте асинхронные операции ввода-вывода для чтения файла.

#### Подсказки:
- Используйте библиотеку aiofiles для асинхронного чтения файла.
- Убедитесь, что функция правильно обрабатывает ошибки, если файл не существует.

### Задание 3: Асинхронные задачи

Создайте асинхронную функцию async def fetch_data(url), которая имитирует медленную загрузку данных (используя asyncio.sleep()). Затем напишите главную функцию, которая запускает несколько параллельных задач fetch_data.

#### Подсказки:
- Используйте asyncio.gather() для запуска нескольких обработчиков одновременно.
- Проверьте, что все задачи завершаются корректно и собираются все результаты.

### Задание 4: Асинхронные генераторы

Создайте асинхронный генератор async def async_number_generator(), который будет генерировать числа от 1 до 5 с задержкой в 1 секунду между генерациями.

#### Подсказки:
- Используйте async for для перебора значений из генератора.
- Убедитесь, что пользователь может перебрать сгенерированные числа.

