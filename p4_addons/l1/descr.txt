### Задание 1: Простые тесты с использованием unittest

 Создайте функцию add(a, b), которая принимает два числа и возвращает их сумму. Затем напишите тесты для этой функции, используя модуль unittest.

#### Подсказки:
- Убедитесь, что функция работает для положительных и отрицательных чисел, а также для нуля.
- Названия тестов должны быть информативными.


### Задание 2: Тестирование класса с использованием unittest

Создайте класс Calculator, который будет иметь методы для выполнения основных арифметических операций
 (сложение, вычитание, умножение, деление). Напишите тесты для этого класса.

#### Подсказки:
- Каждый метод должен принимать два аргумента и возвращать результат операции.
- Проверьте обработку деления на ноль.

### Задание 3: Использование pytest для тестирования функций

Напишите функцию is_prime(n), которая проверяет, является ли число простым. Затем создайте тесты для этой функции с использованием pytest.

#### Подсказки:
- Проверьте, что функция возвращает True для таких чисел, как 2, 3, 5, 7, и False для таких чисел, как 1, 4, 6, 8, 9.
- Добавьте тесты для отрицательных чисел и нуля.

### Задание 4: Параметризованные тесты с использованием pytest

Напишите параметризованные тесты для функции is_prime(n) (из задания 3) с использованием pytest.mark.parametrize.

#### Подсказки:
- Создайте список входных значений и ожидаемых результатов для валидации.
- Используйте параметризованные тесты для сокращения кода и улучшения читаемости.

### Задание 5: Тестирование исключений

Создайте функцию divide(a, b), которая делит a на b, и напишите тесты, которые проверяют, что функция вызывает исключение ZeroDivisionError, когда b равно нулю.

#### Подсказки:
- Используйте как unittest для тестирования, так и pytest.
- Тестируемый метод должен быть в одном файле, а тесты — в другом.

### Задание 6: Конструктор и тестирование метода класса

Создайте класс Person, который будет иметь атрибуты name и age.
 Напишите метод greet, который будет возвращать строку с приветствием. Затем протестируйте этот метод.

#### Подсказки:
- Убедитесь, что метод greet корректно обрабатывает разные имена и возраст.
- Проверяйте, что возраст не может быть отрицательным.
